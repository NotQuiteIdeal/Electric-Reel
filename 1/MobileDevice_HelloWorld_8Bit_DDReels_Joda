/*
 * ----------------------------------------------------
 * DDReels Mobile Device - 8-Bit Parallel LCD Communication
 * Project: Dynamic Drag Reels (D.D. Reels)
 * Author: Gabriel Joda
 * Platform: Raspberry Pi Pico W
 * Purpose: This is the third iteration of 8-bit parallel communication for the EA DIP205-6 LCD (RW1073 Controller).
 *          This version has been fully tested and confirmed to work as intended.
 *
 *          Key improvements in this iteration:
 *            - Optimized `lcd_pulse_enable()` timing for increased stability.
 *            - Improved `lcd_reset()` sequence to ensure proper LCD initialization.
 *            - Refined `lcd_send_command()` and `lcd_send_data()` functions for better execution reliability.
 *            - Introduced a `data_pins` array for cleaner GPIO initialization and handling.
 *            - Confirmed that all four display lines work correctly with accurate DDRAM addressing.
 *
 *          This version ensures **stable and fully functional LCD operation** in an 8-bit parallel mode.
 *
 * Status: ✅ Fully functional, no known issues.
 * ----------------------------------------------------
 */

#include <stdio.h>
#include "pico/stdlib.h"

// === LCD Pin Definitions === //
#define PIN_RS  17  // Register Select (RS) 
#define PIN_RW  19  // Read/Write (Must be LOW for writing)
#define PIN_E   18  // Enable (E)
#define PIN_RES 20  // Reset (RES)

// 8-bit Data Bus
#define PIN_DB0 16
#define PIN_DB1 3
#define PIN_DB2 4
#define PIN_DB3 5
#define PIN_DB4 6
#define PIN_DB5 7
#define PIN_DB6 8
#define PIN_DB7 9

// Array for data bus pins (for cleaner setup)
const int data_pins[8] = {PIN_DB0, PIN_DB1, PIN_DB2, PIN_DB3, PIN_DB4, PIN_DB5, PIN_DB6, PIN_DB7};

// === Function: Initialize GPIO === //
void gpio_setup() {
    // Initialize control pins
    int control_pins[] = {PIN_RS, PIN_RW, PIN_E, PIN_RES};
    for (int i = 0; i < 4; i++) {
        gpio_init(control_pins[i]);
        gpio_set_dir(control_pins[i], GPIO_OUT);
    }

    // Initialize data bus pins
    for (int i = 0; i < 8; i++) {
        gpio_init(data_pins[i]);
        gpio_set_dir(data_pins[i], GPIO_OUT);
    }

    // Set default states
    gpio_put(PIN_RS, 0);
    gpio_put(PIN_RW, 0);  // Always write mode
    gpio_put(PIN_E, 0);
}

// === Function: Reset LCD === //
void lcd_reset() {
    gpio_put(PIN_RES, 0);
    sleep_ms(50);  // Ensure proper reset
    gpio_put(PIN_RES, 1);
    sleep_ms(200); // Allow LCD to stabilize
}

// === Function: Write Data to LCD Bus === //
void lcd_write_bus(uint8_t data) {
    for (int i = 0; i < 8; i++) {
        gpio_put(data_pins[i], (data >> i) & 1);
    }
}

// === Function: Pulse Enable Signal (Triggers LCD to Read Data) === //
void lcd_pulse_enable() {
    gpio_put(PIN_E, 1);
    sleep_us(200);  // Increased from 50us for stability
    gpio_put(PIN_E, 0);
    sleep_us(200);
}

// === Function: Send Command to LCD (Control Instructions) === //
void lcd_send_command(uint8_t cmd) {
    gpio_put(PIN_RS, 0);  // Command mode (RS = 0)
    gpio_put(PIN_RW, 0);  // Write mode (RW = 0)
    lcd_write_bus(cmd);   // Send command to data bus
    lcd_pulse_enable();   // Execute command
    sleep_ms(2);          // Allow execution time
}

// === Function: Send Data to LCD (Display Characters) === //
void lcd_send_data(uint8_t data) {
    gpio_put(PIN_RS, 1);  // Data mode (RS = 1)
    gpio_put(PIN_RW, 0);  // Write mode (RW = 0)
    lcd_write_bus(data);  // Send character data
    lcd_pulse_enable();   // Execute data write
    sleep_ms(1);          // Allow execution time
}

// === Function: Initialize LCD (Configures LCD Settings) === //
void lcd_init() {
    lcd_reset();
    printf("[LCD] Initializing...\n");

    lcd_send_command(0x30);  // Function Set: 8-bit mode
    sleep_ms(10);

    lcd_send_command(0x06);  // Entry Mode Set: Cursor auto-increment
    sleep_ms(5);

    lcd_send_command(0x36);  // Extended Function Set: 4-line mode
    sleep_ms(10);

    lcd_send_command(0x09);  // Enable 4-line display mode
    sleep_ms(5);

    lcd_send_command(0x30);  // Function Set: 8-bit mode (again for stability)
    sleep_ms(10);

    lcd_send_command(0x0C);  // Display ON, Cursor OFF
    sleep_ms(5);

    lcd_send_command(0x01);  // Clear Display
    sleep_ms(10);

    printf("[LCD] Initialization Complete!\n");
}

// === Function: Print a String to the LCD === //
void lcd_print(const char *str) {
    while (*str) {
        lcd_send_data(*str++);  // Send each character to LCD
    }
}

// === Main Function (Program Entry Point) === //
int main() {
    stdio_init_all();  // Initialize USB serial output (for debugging)
    gpio_setup();      // Configure GPIOs
    lcd_init();        // Initialize LCD

    // ✅ Display messages on all 4 lines
    lcd_send_command(0x80 | 0x00); // Line 1 (Address 0x00)
    lcd_print("Hello, World!");

    lcd_send_command(0x80 | 0x20); // Line 2 (Address 0x20)
    lcd_print("Pico LCD 8-bit");

    lcd_send_command(0x80 | 0x40); // Line 3 (Address 0x40)
    lcd_print("Using RW1073");

    lcd_send_command(0x80 | 0x60); // Line 4 (Address 0x60)
    lcd_print("Optimized Code!");

    while (1) {
        sleep_ms(1000);  // Keep program running
    }
}
