/*
 * ----------------------------------------------------
 * DDReels Mobile Device - SPI LCD Communication
 * Project: Dynamic Drag Reels (D.D. Reels)
 * Author: Gabriel Joda
 * Platform: Raspberry Pi Pico W
 * Purpose: This code attempts to interface the EA DIP205-6 LCD (RW1073 Controller)
 *          with the Pico W using SPI communication. The goal is to display text
 *          on a 4x20 character LCD.
 *
 *          This iteration follows the RW1073 initialization sequence as per
 *          the datasheet. 
 *
 * Status: This code does not work as intended. Debugging required.
 * ----------------------------------------------------
 */

#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/spi.h"

// SPI Pin Definitions
#define SPI_PORT spi0
#define PIN_CS   17  // Chip Select (CS)
#define PIN_SCLK 18  // Clock (SCLK)
#define PIN_MOSI 19  // Data (SID)
#define PIN_RES  16  // Reset (RES)
#define PIN_VCI  20  // Contrast control (optional)

// RW1073 Command Set
#define CMD_FUNCTION_SET    0x30
#define CMD_EXT_FUNCTION_SET 0x36  // Extended function set
#define CMD_DISPLAY_CONTROL 0x0C
#define CMD_CLEAR_DISPLAY   0x01
#define CMD_ENTRY_MODE_SET  0x06
#define CMD_SET_SEGRAM_ADDR 0x40   // For icon control
#define CMD_SET_DDRAM_ADDR  0x80   // For text positioning

// Function to reset the LCD
void lcd_reset() {
    gpio_init(PIN_RES);
    gpio_set_dir(PIN_RES, GPIO_OUT);
    gpio_put(PIN_RES, 0);  // Active low reset
    sleep_ms(50);          // Datasheet specifies a minimum reset time
    gpio_put(PIN_RES, 1);
    sleep_ms(150);         // Wait >100ms after reset
}

// Function to send a command to the LCD
void lcd_send_command(uint8_t command) {
    gpio_put(PIN_CS, 0);  // Activate LCD
    spi_write_blocking(SPI_PORT, &command, 1);
    gpio_put(PIN_CS, 1);  // Deactivate LCD
    sleep_ms(2);  // Required delay per RW1073 execution time
}

// Function to send data to the LCD
void lcd_send_data(uint8_t data) {
    gpio_put(PIN_CS, 0);
    uint8_t packet = data | 0x40;  // RS bit set for data transmission
    spi_write_blocking(SPI_PORT, &packet, 1);
    gpio_put(PIN_CS, 1);
    sleep_ms(1);
}

// LCD initialization sequence as per RW1073 datasheet
void lcd_init() {
    lcd_reset();

    // Initialization sequence based on Display Visions' sample code
    lcd_send_command(0x30);        // 8-bit interface, basic instruction set
    sleep_ms(15);                  // Wait >10ms

    lcd_send_command(0x30);        // Repeat initialization
    sleep_ms(5);                   // Wait >4.1ms

    lcd_send_command(0x30);        // Third initialization
    sleep_ms(1);                   // Wait >100Âµs

    lcd_send_command(CMD_EXT_FUNCTION_SET | 0x04); // 4-line mode, RE=1
    sleep_ms(1);

    lcd_send_command(0x09);        // 4-line display mode (from EA DIP205B docs)
    sleep_ms(1);

    lcd_send_command(0x0C);        // Display ON, cursor OFF, blink OFF
    sleep_ms(1);

    lcd_send_command(0x01);        // Clear display
    sleep_ms(5);                   // Wait >4.1ms

    lcd_send_command(0x06);        // Entry mode: increment, no shift
    sleep_ms(1);
}

// Function to print a string on the LCD
void lcd_print(const char *str) {
    while (*str) {
        lcd_send_data(*str++);
    }
}

int main() {
    stdio_init_all();

    // Initialize SPI communication
    spi_init(SPI_PORT, 100000);    // Start with 100kHz clock speed
    spi_set_format(SPI_PORT, 8, SPI_CPOL_0, SPI_CPHA_0, SPI_MSB_FIRST);
    gpio_set_function(PIN_SCLK, GPIO_FUNC_SPI);
    gpio_set_function(PIN_MOSI, GPIO_FUNC_SPI);

    // Initialize Chip Select (CS) pin
    gpio_init(PIN_CS);
    gpio_set_dir(PIN_CS, GPIO_OUT);
    gpio_put(PIN_CS, 1); // Ensure LCD is deselected by default

    // Initialize LCD module
    lcd_init();

    // Attempt to print text to all 4 lines (assuming 4x20 display)
    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x00);  // Move to Line 1
    lcd_print("Hello, World!");
    
    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x20);  // Move to Line 2
    lcd_print("Line 2");
    
    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x40);  // Move to Line 3
    lcd_print("Line 3");
    
    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x60);  // Move to Line 4
    lcd_print("Line 4");

    // Infinite loop to prevent termination
    while (true) {
        sleep_ms(1000);
    }
}
