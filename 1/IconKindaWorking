#include <stdio.h>
#include <string.h>
#include "pico/stdlib.h"
#include "hardware/gpio.h"

// === LCD Pin Definitions === //
// The LCD module (4x20 display) uses a controller similar to the HD44780,
// but our module is built around the RW1073 driver/controller. For details see
// MobileDevice_LCD_Joda.pdf :contentReference[oaicite:4]{index=4} and RW1073 datasheet :contentReference[oaicite:5]{index=5}.
#define PIN_RS  17    // Register Select: low = command, high = data.
#define PIN_RW  19    // Read/Write control: low = write.
#define PIN_E   18    // Enable pin: triggers data transfer on falling edge.
#define PIN_RES 20    // Reset pin.

// 8-bit Data Bus for LCD (D0-D7)
const int data_pins[8] = {16, 3, 4, 5, 6, 7, 8, 9};

// Rotary Encoder Button (we use only the integrated push-button)
#define ENCODER_BTN 12  // Encoder push-button (active low).

// --- LCD Helper Functions --- //

// Writes an 8-bit value to the LCD data bus.
void lcd_write_bus(uint8_t data) {
    for (int i = 0; i < 8; i++) {
        gpio_put(data_pins[i], (data >> i) & 1);
    }
}

// Generates an enable pulse per RW1073/HD44780 protocol.
void lcd_pulse_enable() {
    gpio_put(PIN_E, 1);
    sleep_us(200);
    gpio_put(PIN_E, 0);
    sleep_us(200);
}

// Sends a command byte to the LCD.
void lcd_send_command(uint8_t cmd) {
    gpio_put(PIN_RS, 0); // Command mode.
    gpio_put(PIN_RW, 0); // Write mode.
    lcd_write_bus(cmd);
    lcd_pulse_enable();
    sleep_ms(2);
}

// Sends a data byte to the LCD.
void lcd_send_data(uint8_t data) {
    gpio_put(PIN_RS, 1); // Data mode.
    gpio_put(PIN_RW, 0); // Write mode.
    lcd_write_bus(data);
    lcd_pulse_enable();
    sleep_ms(1);
}

// Initializes the LCD module using standard RW1073/HD44780 procedures.
// Refer to MobileDevice_LCD_Joda.pdf :contentReference[oaicite:9]{index=9}
// and RW1073 datasheet :contentReference[oaicite:10]{index=10}.
void lcd_init() {
    gpio_put(PIN_RES, 0);
    sleep_ms(50);
    gpio_put(PIN_RES, 1);
    sleep_ms(200);

    lcd_send_command(0x30); // Function set: 8-bit mode.
    sleep_ms(10);
    lcd_send_command(0x06); // Entry mode set: auto-increment.
    sleep_ms(5);
    lcd_send_command(0x36); // Extended function set.
    sleep_ms(10);
    lcd_send_command(0x09); // Icon display on.
    sleep_ms(5);
    lcd_send_command(0x30); // Basic instruction set.
    sleep_ms(10);
    lcd_send_command(0x0C); // Display ON, cursor off.
    sleep_ms(5);
    lcd_send_command(0x01); // Clear display.
    sleep_ms(10);

    printf("[LCD] Initialization Complete!\n");
}

// Prints a string to the LCD.
void lcd_print(const char *str) {
    while (*str)
        lcd_send_data(*str++);
}

// Prints a string centered on a given line (1 to 4).
void lcd_print_centered(const char *str, uint8_t line) {
    uint8_t start_pos = (20 - strlen(str)) / 2;
    uint8_t ddram_address = (line - 1) * 0x20 + start_pos;
    lcd_send_command(0x80 | ddram_address);
    lcd_print(str);
}

// Displays the main screen.
void display_main_screen() {
    lcd_send_command(0x01);  // Clear display.
    lcd_print_centered("MAIN SCREEN", 1);
    lcd_print_centered("Press Encoder", 2);
    printf("[LCD] Main Screen Displayed.\n");
}

// --- New Function: lcd_display_icon_example --- //
// This function executes the sequence:
// 1. Function set 0x36.
// 2. Set SEGRAM: command 0x42.
// 3. Write icon-RAW address 0x02.
// 4. Write data 0x10 twice to display the symbol.
// 5. Function set 0x30 (8-bit mode, RE=0).
// 6. Set DDRAM address 0x80 (restore DDRAM address).
void lcd_display_icon_example(void) {
    lcd_send_command(0x36); // Step 1: Function set to extended mode.
    lcd_send_command(0x42); // Step 2: Set SEGRAM command.
    lcd_send_data(0x02);    // Step 3: Set icon-RAW address to 0x02 (for letter symbol).
    lcd_send_data(0x10);    // Step 4: Write data 0x10.
    lcd_send_data(0x10);    // Write data 0x10 again.
    lcd_send_command(0x30); // Step 5: Function set to 8-bit mode, RE=0.
    lcd_send_command(0x80); // Step 6: Set DDRAM address to 0x80.
    printf("[ICON] Icon command sequence executed.\n");
}

// --- GPIO Setup --- //
// Initializes all GPIO pins used by the LCD and encoder push-button.
void gpio_setup(void) {
    int control_pins[] = {PIN_RS, PIN_RW, PIN_E, PIN_RES};
    for (int i = 0; i < 4; i++) {
        gpio_init(control_pins[i]);
        gpio_set_dir(control_pins[i], GPIO_OUT);
    }
    for (int i = 0; i < 8; i++) {
        gpio_init(data_pins[i]);
        gpio_set_dir(data_pins[i], GPIO_OUT);
    }
    gpio_init(ENCODER_BTN);
    gpio_set_dir(ENCODER_BTN, GPIO_IN);
    gpio_pull_up(ENCODER_BTN);
}

int main(void) {
    stdio_init_all();
    sleep_ms(2000);
    gpio_setup();
    lcd_init();
    display_main_screen();

    while (1) {
        // When the encoder button is pressed (active low), execute the icon sequence.
        if (!gpio_get(ENCODER_BTN)) {
            printf("Encoder button pressed: executing icon sequence.\n");
            lcd_display_icon_example(); // Execute the command sequence to display the icon.
            sleep_ms(3000);             // Hold icon on screen for 3 seconds.
            display_main_screen();      // Restore main screen.
        }
        sleep_ms(50);
    }
}
