/*
 * ----------------------------------------------------
 * DDReels Mobile Device - SPI LCD Communication
 * Project: Dynamic Drag Reels (D.D. Reels)
 * Author: Gabriel Joda
 * Platform: Raspberry Pi Pico W
 * Purpose: This is the fifth iteration of the SPI communication code for the EA DIP205-6 LCD (RW1073 Controller).
 *          This version refines initialization timing, increases SPI clock speed to 500kHz, and ensures compatibility
 *          with the RW1073 controller's command sequence. Fixed delays remain in place for stability.
 *
 *          The code initializes SPI communication, performs hardware reset, and writes data to the 4x20 character LCD.
 *          Improvements in this iteration include:
 *            - Adjusted delays for more efficient LCD operation
 *            - Increased SPI clock speed to 500kHz for faster communication
 *            - Improved LCD command structuring for better readability and execution flow
 *
 *          While the approach appears stable, **further testing is required** to verify consistent operation
 *          across different power cycles and use cases.
 *
 * Status: Requires final testing for long-term reliability.
 * ----------------------------------------------------
 */

#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/spi.h"

// SPI Pin Definitions (GPIOs)
#define SPI_PORT spi0
#define PIN_CS   17  // Chip Select (CS) - Active Low
#define PIN_SCLK 18  // SPI Clock (SCLK)
#define PIN_MOSI 19  // SPI Data Out (MOSI / SID)
#define PIN_RES  16  // Reset (RES) - Active Low

// RW1073 Command Set (LCD Controller)
#define CMD_FUNCTION_SET    0x30  // Basic 8-bit mode
#define CMD_EXT_FUNCTION_SET 0x36 // Extended function set (for 4-line mode)
#define CMD_DISPLAY_CONTROL 0x0C  // Display ON, Cursor OFF
#define CMD_CLEAR_DISPLAY   0x01  // Clear screen
#define CMD_ENTRY_MODE_SET  0x06  // Auto-increment cursor
#define CMD_SET_DDRAM_ADDR  0x80  // Set DDRAM address (text positioning)

// Function: Reset LCD (Ensures proper startup)
void lcd_reset() {
    gpio_init(PIN_RES);
    gpio_set_dir(PIN_RES, GPIO_OUT);
    gpio_put(PIN_RES, 0);  // Pull low to reset
    sleep_ms(50);
    gpio_put(PIN_RES, 1);  // Release reset
    sleep_ms(150); // LCD requires >100ms after reset
}

// Function: Send command to LCD
void lcd_send_command(uint8_t command) {
    gpio_put(PIN_CS, 0);  // Select LCD (Active Low)
    spi_write_blocking(SPI_PORT, &command, 1);
    gpio_put(PIN_CS, 1);  // Deselect LCD
    sleep_ms(2);  // Small delay (LCD requires ~37Âµs)
}

// Function: Send data (characters) to LCD
void lcd_send_data(uint8_t data) {
    gpio_put(PIN_CS, 0);
    uint8_t packet = data | 0x40;  // RS bit set for data mode
    spi_write_blocking(SPI_PORT, &packet, 1);
    gpio_put(PIN_CS, 1);
    sleep_ms(1);
}

// Function: Initialize LCD (Follows RW1073 Datasheet)
void lcd_init() {
    lcd_reset();  // Perform a hardware reset

    // Standard 8-bit initialization sequence (RW1073 Datasheet)
    lcd_send_command(CMD_FUNCTION_SET); sleep_ms(15);  // Function set
    lcd_send_command(CMD_FUNCTION_SET); sleep_ms(5);
    lcd_send_command(CMD_FUNCTION_SET); sleep_ms(1);

    // Enable 4-line display mode (Extended function set)
    lcd_send_command(CMD_EXT_FUNCTION_SET | 0x04);
    sleep_ms(1);

    lcd_send_command(0x09); // 4-line mode activation (from EA DIP205B docs)
    sleep_ms(1);

    lcd_send_command(CMD_DISPLAY_CONTROL); // Display ON, cursor OFF
    sleep_ms(1);

    lcd_send_command(CMD_CLEAR_DISPLAY); // Clear display
    sleep_ms(5);

    lcd_send_command(CMD_ENTRY_MODE_SET); // Auto-increment cursor
    sleep_ms(1);
}

// Function: Print a string on the LCD
void lcd_print(const char *str) {
    while (*str) {
        lcd_send_data(*str++); // Send characters one by one
    }
}

// Main Program
int main() {
    stdio_init_all();  // Initialize standard I/O (For Debugging)

    // SPI Initialization (500kHz, Mode 0)
    spi_init(SPI_PORT, 500000);
    spi_set_format(SPI_PORT, 8, SPI_CPOL_0, SPI_CPHA_0, SPI_MSB_FIRST);
    gpio_set_function(PIN_SCLK, GPIO_FUNC_SPI);
    gpio_set_function(PIN_MOSI, GPIO_FUNC_SPI);

    // CS Pin Setup
    gpio_init(PIN_CS);
    gpio_set_dir(PIN_CS, GPIO_OUT);
    gpio_put(PIN_CS, 1); // Deselect LCD by default

    // Initialize LCD
    lcd_init();

    // Display text on all 4 lines (4x20 LCD)
    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x00);  // Line 1
    lcd_print("Hello, World!");

    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x20);  // Line 2
    lcd_print("SPI LCD Test");

    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x40);  // Line 3
    lcd_print("Line 3 Display");

    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x60);  // Line 4
    lcd_print("Final Line 4");

    // Keep running
    while (true) {
        sleep_ms(1000);
    }
}
