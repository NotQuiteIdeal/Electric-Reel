#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/spi.h"
#include <string.h>

// === SPI Pin Definitions === //
#define SPI_PORT spi0
#define PIN_MISO 16  // SOD (Slave Out)
#define PIN_CS   17  // Chip Select (CS) - Active Low
#define PIN_SCLK 18  // SPI Clock (SCLK)
#define PIN_MOSI 19  // SPI Data Out (MOSI / SID)
#define PIN_RES  22  // Reset (RES) - Active Low

// === RW1073 LCD Commands === //
#define CMD_FUNCTION_SET     0x30  // Function set, wait >39us
#define CMD_ENTRY_MODE_SET   0x07  // Entry Mode Set
#define CMD_EXT_FUNCTION_SET 0x36  // Extended function set (for 4-line mode)
#define CMD_DISPLAY_CONTROL  0x0F  // Display ON, Cursor ON
#define CMD_CLEAR_DISPLAY    0x01  // Clear display, wait >1.53ms



#define CMD_SET_DDRAM_ADDR   0x80  // Set DDRAM address (text positioning)

// === LCD Reset Function === //
void lcd_reset() {
    gpio_init(PIN_RES);
    gpio_set_dir(PIN_RES, GPIO_OUT);
    gpio_put(PIN_RES, 0);  // Pull low to reset
    sleep_ms(50);
    gpio_put(PIN_RES, 1);  // Release reset
    sleep_ms(150); // LCD requires >100ms after reset
}

// === Function: Send Command to LCD === //
void lcd_send_command(uint8_t command) {
    gpio_put(PIN_CS, 0);  // Select LCD (Active Low)
    spi_write_blocking(SPI_PORT, &command, 1);
    gpio_put(PIN_CS, 1);  // Deselect LCD
    sleep_ms(2);  // Small delay 
    printf("[LCD] Sent Command: 0x%X\n", command);
}

// === Function: Send Data to LCD === //
void lcd_send_data(uint8_t data) {
    gpio_put(PIN_CS, 0);
    uint8_t packet = data | 0x40;  // RS bit set for data mode
    spi_write_blocking(SPI_PORT, &packet, 1);
    gpio_put(PIN_CS, 1);
    sleep_ms(1);
    printf("[LCD] Sent Data: %c (0x%X)\n", data, data);
}

// === Function: Initialize LCD (Follows RW1073 Datasheet) === //
void lcd_init() {
    sleep_ms(25);
    lcd_reset();  // Perform a hardware reset

    printf("[LCD] Initializing...\n");

    // 8-bit initialization sequence (RW1073 Datasheet)
    lcd_send_command(CMD_FUNCTION_SET); 
    sleep_ms(15);  

    lcd_send_command(CMD_ENTRY_MODE_SET); // Auto-increment cursor
    sleep_ms(1);
    printf("[LCD] Entry Mode Set.\n");
    
    // Enable 4-line display mode (Extended function set)
    lcd_send_command(CMD_EXT_FUNCTION_SET | 0x04);
    printf("[LCD] 4-line display mode enabled.\n");
    sleep_ms(1);

    lcd_send_command(0x09); // 4-line mode activation (from EA DIP205B docs)
    sleep_ms(1);
    printf("[LCD] 4-line display mode enabled.\n");

    // === Now Write to SEGRAM (Clear Icon Data) === //
    lcd_send_command(0x40); // Set SEGRAM Address (Equivalent to WriteIns(0x40))
    sleep_ms(1);
    printf("[LCD] Setting SEGRAM Address...\n");

    for (int i = 0; i < 16; i++) {
        lcd_send_data(0x00); // Write 0x00 to SEGRAM (Equivalent to WriteData(0x00))
    }
    printf("[LCD] SEGRAM Cleared (Icons Reset).\n");

    // 8-bit initialization sequence (RW1073 Datasheet)
    lcd_send_command(CMD_FUNCTION_SET); 
    sleep_ms(15);  

    lcd_send_command(CMD_DISPLAY_CONTROL); // Display ON, Cursor ON
    sleep_ms(1);
    printf("[LCD] Display ON.\n");

    lcd_send_command(CMD_CLEAR_DISPLAY); // Clear display
    sleep_ms(5);
    printf("[LCD] Cleared Display.\n");



    printf("[LCD] Initialization Complete!\n");
}

// === Function: Print a String to the LCD === //
void lcd_print(const char *str) {
    while (*str) {
        lcd_send_data(*str++);
    }
}

// === Main Program === //
int main() {
    stdio_init_all();  // Initialize standard I/O (For Debugging)
    sleep_ms(10000);   // Wait 10 seconds before starting (USB debug delay)

    // === SPI Initialization === //
    spi_init(SPI_PORT, 270000); // 270kHz SPI clock
    spi_set_format(SPI_PORT, 8, SPI_CPOL_0, SPI_CPHA_0, SPI_MSB_FIRST);
    gpio_set_function(PIN_SCLK, GPIO_FUNC_SPI);
    gpio_set_function(PIN_MOSI, GPIO_FUNC_SPI);

    // === CS Pin Setup === //
    gpio_init(PIN_CS);
    gpio_set_dir(PIN_CS, GPIO_OUT);
    gpio_put(PIN_CS, 1); // Deselect LCD by default

    // === Initialize LCD === //
    lcd_init();

    // === Display Text on All 4 Lines (4x20 LCD) === //
    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x00);  // Line 1
    printf("[LCD] Printing: Hello, World!\n");
    lcd_print("Hello, World!");

    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x20);  // Line 2
    printf("[LCD] Printing: SPI LCD Test\n");
    lcd_print("SPI LCD Test");

    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x40);  // Line 3
    printf("[LCD] Printing: Line 3 Display\n");
    lcd_print("Line 3 Display");

    lcd_send_command(CMD_SET_DDRAM_ADDR | 0x60);  // Line 4
    printf("[LCD] Printing: Final Line 4\n");
    lcd_print("Final Line 4");

    // === Keep Running === //
    while (true) {
        sleep_ms(1000);
        printf("[DEBUG] Main loop running...\n");
    }
}
