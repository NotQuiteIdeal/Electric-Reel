/*
 * ----------------------------------------------------
 * DDReels Mobile Device - SPI LCD Communication
 * Project: Dynamic Drag Reels (D.D. Reels)
 * Author: Gabriel Joda
 * Platform: Raspberry Pi Pico W
 * Purpose: This is the eighth iteration of the SPI communication code for the EA DIP205-6 LCD (RW1073 Controller).
 *          This version introduces a 3-byte SPI packet format for command and data transmission and implements a busy flag check
 *          before executing LCD commands to improve reliability.
 *
 *          Key improvements in this iteration:
 *            - Introduced a 3-byte SPI transmission format (lower and upper nibbles split)
 *            - Implemented `lcd_check_busy()` to poll the LCD's busy flag before sending commands
 *            - Improved initialization sequence for enhanced compatibility with the RW1073 controller
 *            - SEGRAM clearing added for proper icon reset
 *            - Refined LCD printing function to check readiness before sending data
 *
 *          This version aims to ensure stable SPI communication and prevent premature command execution.
 *          Further validation is needed to confirm operational consistency under various conditions.
 *
 * Status: Requires additional real-world testing for reliability.
 * ----------------------------------------------------
 */

#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/spi.h"

// === SPI Pin Definitions === //
#define SPI_PORT spi0
#define PIN_CS   17  // Chip Select (Active Low)
#define PIN_SCLK 18  // SPI Clock
#define PIN_MOSI 19  // SPI Data Out (MOSI / SID)
#define PIN_RES  22  // Reset (Active Low)

// === RW1073 LCD Commands === //
#define CMD_FUNCTION_SET     0x30
#define CMD_ENTRY_MODE_SET   0x06
#define CMD_EXT_FUNCTION_SET 0x36
#define CMD_DISPLAY_CONTROL  0x0F
#define CMD_CLEAR_DISPLAY    0x01
#define CMD_SET_DDRAM_ADDR   0x80

// === SPI Data Transmission Function (3-Byte Format) === //
void lcd_send(uint8_t mode, uint8_t data) {
    gpio_put(PIN_CS, 0);  // Select LCD

    uint8_t packet[3];
    packet[0] = (mode ? 0x5F : 0x1F);  // 0x5F for data, 0x1F for command
    packet[1] = data & 0x0F;  // Lower nibble
    packet[2] = (data >> 4) & 0x0F;  // Upper nibble

    spi_write_blocking(SPI_PORT, packet, 3);
    
    gpio_put(PIN_CS, 1);  // Deselect LCD
    sleep_ms(2);
}

// === Check Busy Flag === //
void lcd_check_busy() {
    uint8_t busy = 1;
    while (busy) {
        gpio_put(PIN_CS, 0);
        uint8_t command = 0x3F;
        uint8_t response;
        spi_write_blocking(SPI_PORT, &command, 1);
        spi_read_blocking(SPI_PORT, 0x00, &response, 1);
        gpio_put(PIN_CS, 1);

        busy = response & 0x80; // Check if busy flag is set
    }
}

// === LCD Reset Function === //
void lcd_reset() {
    gpio_put(PIN_RES, 0);
    sleep_ms(50);
    gpio_put(PIN_RES, 1);
    sleep_ms(150);
}

// === LCD Initialization === //
void lcd_init() {
    sleep_ms(25);
    lcd_reset();

    lcd_check_busy();
    lcd_send(0, CMD_FUNCTION_SET); 
    sleep_ms(15);

    lcd_check_busy();
    lcd_send(0, CMD_ENTRY_MODE_SET);
    sleep_ms(1);
    
    lcd_check_busy();
    lcd_send(0, CMD_EXT_FUNCTION_SET | 0x04);
    sleep_ms(1);

    lcd_check_busy();
    lcd_send(0, 0x09); // 4-line mode
    sleep_ms(1);

    lcd_check_busy();
    lcd_send(0, 0x40); // SEGRAM Clear
    for (int i = 0; i < 16; i++) {
        lcd_send(1, 0x00);
    }

    lcd_check_busy();
    lcd_send(0, CMD_FUNCTION_SET);
    sleep_ms(15);

    lcd_check_busy();
    lcd_send(0, CMD_DISPLAY_CONTROL);
    sleep_ms(1);

    lcd_check_busy();
    lcd_send(0, CMD_CLEAR_DISPLAY);
    sleep_ms(5);
}

// === Function: Print a String to the LCD === //
void lcd_print(const char *str) {
    while (*str) {
        lcd_check_busy();
        lcd_send(1, *str++);
    }
}

// === Main Program === //
int main() {
    stdio_init_all();
    sleep_ms(5000);  // Delay before execution

    spi_init(SPI_PORT, 270000);
    spi_set_format(SPI_PORT, 8, SPI_CPOL_0, SPI_CPHA_0, SPI_MSB_FIRST);
    gpio_set_function(PIN_SCLK, GPIO_FUNC_SPI);
    gpio_set_function(PIN_MOSI, GPIO_FUNC_SPI);

    gpio_init(PIN_CS);
    gpio_set_dir(PIN_CS, GPIO_OUT);
    gpio_put(PIN_CS, 1);

    gpio_init(PIN_RES);
    gpio_set_dir(PIN_RES, GPIO_OUT);
    gpio_put(PIN_RES, 1);

    lcd_init();

    lcd_send(0, CMD_SET_DDRAM_ADDR | 0x00);
    lcd_print("Hello, World!");

    lcd_send(0, CMD_SET_DDRAM_ADDR | 0x20);
    lcd_print("SPI LCD Test");

    lcd_send(0, CMD_SET_DDRAM_ADDR | 0x40);
    lcd_print("Line 3 Display");

    lcd_send(0, CMD_SET_DDRAM_ADDR | 0x60);
    lcd_print("Final Line 4");

    while (true) {
        sleep_ms(1000);
    }
}
