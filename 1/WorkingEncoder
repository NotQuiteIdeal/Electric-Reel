#include <stdio.h>
#include "pico/stdlib.h"
#include "hardware/gpio.h"

// Rotary Encoder Pins
#define ENCODER_A 10  
#define ENCODER_B 11  
#define ENCODER_BTN 12  

volatile int menu_index = 0;
volatile bool cw_fall = false;
volatile bool ccw_fall = false;

// Interrupt callback function
void encoder_callback(uint gpio, uint32_t events) {
    uint32_t gpio_state = (gpio_get_all() >> 10) & 0b11;  // Read only ENCODER_A and ENCODER_B

    if (gpio == ENCODER_A) {
        if (!cw_fall && (gpio_state == 0b10)) {
            cw_fall = true;
        }
        if (ccw_fall && (gpio_state == 0b00)) {  // Counter-clockwise detected
            ccw_fall = false;
            cw_fall = false;
            menu_index--;
            if (menu_index < 0) menu_index = 0;
            printf("[ENCODER] Counter-clockwise - Menu index: %d\n", menu_index);
        }
    } else if (gpio == ENCODER_B) {
        if (!ccw_fall && (gpio_state == 0b01)) {
            ccw_fall = true;
        }
        if (cw_fall && (gpio_state == 0b00)) {  // Clockwise detected
            cw_fall = false;
            ccw_fall = false;
            menu_index++;
            if (menu_index > 4) menu_index = 4;
            printf("[ENCODER] Clockwise - Menu index: %d\n", menu_index);
        }
    }
}

void gpio_setup() {
    gpio_init(ENCODER_A);
    gpio_set_dir(ENCODER_A, GPIO_IN);
    gpio_pull_up(ENCODER_A);

    gpio_init(ENCODER_B);
    gpio_set_dir(ENCODER_B, GPIO_IN);
    gpio_pull_up(ENCODER_B);

    gpio_init(ENCODER_BTN);
    gpio_set_dir(ENCODER_BTN, GPIO_IN);
    gpio_pull_up(ENCODER_BTN);

    gpio_set_irq_enabled_with_callback(ENCODER_A, GPIO_IRQ_EDGE_FALL, true, &encoder_callback);
    gpio_set_irq_enabled(ENCODER_B, GPIO_IRQ_EDGE_FALL, true);
}

int main() {
    stdio_init_all();
    sleep_ms(2000);
    printf("[SYSTEM] Starting...\n");

    gpio_setup();

    while (1) {
        sleep_ms(100);  // Main loop continues while interrupts handle the encoder
    }
}
