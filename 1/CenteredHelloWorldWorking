#include <stdio.h>
#include <string.h>  // For strlen()
#include "pico/stdlib.h"

// === LCD Pin Definitions === //
#define PIN_RS  17  // Register Select (RS) 
#define PIN_RW  19  // Read/Write (Must be LOW for writing)
#define PIN_E   18  // Enable (E)

// 8-bit Data Bus
#define PIN_DB0 16
#define PIN_DB1 3
#define PIN_DB2 4
#define PIN_DB3 5
#define PIN_DB4 6
#define PIN_DB5 7
#define PIN_DB6 8
#define PIN_DB7 9

// Data bus array for efficient handling
const int data_pins[8] = {PIN_DB0, PIN_DB1, PIN_DB2, PIN_DB3, PIN_DB4, PIN_DB5, PIN_DB6, PIN_DB7};

// === Function: Initialize GPIO === //
void gpio_setup() {
    // Initialize control pins
    int control_pins[] = {PIN_RS, PIN_RW, PIN_E};
    for (int i = 0; i < 3; i++) {
        gpio_init(control_pins[i]);
        gpio_set_dir(control_pins[i], GPIO_OUT);
    }

    // Initialize data bus pins
    for (int i = 0; i < 8; i++) {
        gpio_init(data_pins[i]);
        gpio_set_dir(data_pins[i], GPIO_OUT);
    }

    // Set default states
    gpio_put(PIN_RS, 0);
    gpio_put(PIN_RW, 0);  // Always write mode
    gpio_put(PIN_E, 0);
}

// === Function: Write Data to LCD Bus === //
void lcd_write_bus(uint8_t data) {
    for (int i = 0; i < 8; i++) {
        gpio_put(data_pins[i], (data >> i) & 1);
    }
}

// === Function: Pulse Enable Signal (Triggers LCD to Read Data) === //
void lcd_pulse_enable() {
    gpio_put(PIN_E, 1);
    sleep_us(200);  // Increased from 50us for stability
    gpio_put(PIN_E, 0);
    sleep_us(200);
}

// === Function: Send Command to LCD (Control Instructions) === //
void lcd_send_command(uint8_t cmd) {
    gpio_put(PIN_RS, 0);  // Command mode (RS = 0)
    gpio_put(PIN_RW, 0);  // Write mode (RW = 0)
    lcd_write_bus(cmd);   // Send command to data bus
    lcd_pulse_enable();   // Execute command
    sleep_ms(2);          // Allow execution time
}

// === Function: Send Data to LCD (Display Characters) === //
void lcd_send_data(uint8_t data) {
    gpio_put(PIN_RS, 1);  // Data mode (RS = 1)
    gpio_put(PIN_RW, 0);  // Write mode (RW = 0)
    lcd_write_bus(data);  // Send character data
    lcd_pulse_enable();   // Execute data write
    sleep_ms(1);          // Allow execution time
}

// === Function: Initialize LCD (Configures LCD Settings) === //
void lcd_init() {
    printf("[LCD] Initializing...\n");

    lcd_send_command(0x30);  // Function Set: 8-bit mode
    sleep_ms(10);

    lcd_send_command(0x06);  // Entry Mode Set: Cursor auto-increment
    sleep_ms(5);

    lcd_send_command(0x36);  // Extended Function Set: 4-line mode
    sleep_ms(10);

    lcd_send_command(0x09);  // Enable 4-line display mode
    sleep_ms(5);

    lcd_send_command(0x30);  // Function Set: 8-bit mode (again for stability)
    sleep_ms(10);

    lcd_send_command(0x0C);  // Display ON, Cursor OFF
    sleep_ms(5);

    lcd_send_command(0x01);  // Clear Display
    sleep_ms(10);

    printf("[LCD] Initialization Complete!\n");
}

// === Function: Print a String to the LCD === //
void lcd_print(const char *str) {
    while (*str) {
        lcd_send_data(*str++);  // Send each character to LCD
    }
}

// === Function: Print a Centered String to the LCD === //
void lcd_print_centered(const char *str, uint8_t line) {
    uint8_t text_length = strlen(str);
    if (text_length > 20) text_length = 20;  // Ensure text fits

    // Calculate center position (assuming a 20-character-wide display)
    uint8_t start_pos = (20 - text_length) / 2;
    uint8_t ddram_address = 0x00;

    // Set DDRAM Address based on line number
    switch (line) {
        case 1: ddram_address = 0x00 + start_pos; break;
        case 2: ddram_address = 0x20 + start_pos; break;
        case 3: ddram_address = 0x40 + start_pos; break;
        case 4: ddram_address = 0x60 + start_pos; break;
        default: return;  // Invalid line number, exit function
    }

    lcd_send_command(0x80 | ddram_address);  // Move cursor to calculated position
    lcd_print(str);  // Print string at centered position
}

// === Main Function (Program Entry Point) === //
int main() {
    stdio_init_all();  // Initialize USB serial output (for debugging)
    gpio_setup();      // Configure GPIOs
    lcd_init();        // Initialize LCD

    // âœ… Display messages centered on all 4 lines
    lcd_print_centered("Hello, World!", 1);
    lcd_print_centered("DD Reels", 2);
    lcd_print_centered("Gabriel Joda", 3);
    lcd_print_centered("Electronic Reel", 4);

    while (1) {
        sleep_ms(1000);  // Keep program running
    }
}
