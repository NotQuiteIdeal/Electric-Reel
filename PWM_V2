#include "pico/stdlib.h"
#include "hardware/pwm.h"
#include "hardware/adc.h"

// Pin Definitions
#define PWM_PIN 20       // PWM output pin
#define POT_PIN 26       // Potentiometer ADC input

// PWM resolution
#define PWM_RESOLUTION 65535  // Full 16-bit range

// Define min and max duty cycle limits (default values)
volatile uint16_t min_duty = 16384; // 25% duty cycle
volatile uint16_t max_duty = 49152; // 75% duty cycle

// Function to initialize PWM
void setup_pwm(uint gpio_pin) {
    gpio_set_function(gpio_pin, GPIO_FUNC_PWM);
    uint slice_num = pwm_gpio_to_slice_num(gpio_pin);
    pwm_set_wrap(slice_num, PWM_RESOLUTION); // Full range 0-65535
    pwm_set_chan_level(slice_num, pwm_gpio_to_channel(gpio_pin), 0);
    pwm_set_enabled(slice_num, true);
}

// Function to read ADC value
uint16_t read_potentiometer() {
    return adc_read();
}

// Function to set PWM duty cycle with limits
void set_pwm_duty(uint16_t duty_cycle) {
    uint slice_num = pwm_gpio_to_slice_num(PWM_PIN);

    // Constrain duty cycle within min and max limits
    if (duty_cycle < min_duty) duty_cycle = min_duty;
    if (duty_cycle > max_duty) duty_cycle = max_duty;

    pwm_set_chan_level(slice_num, pwm_gpio_to_channel(PWM_PIN), duty_cycle);
}

// Function to update min/max limits dynamically
void update_limits(uint16_t new_min, uint16_t new_max) {
    if (new_min < new_max) {
        min_duty = new_min;
        max_duty = new_max;
    }
}

int main() {
    stdio_init_all();
    adc_init();
    adc_gpio_init(POT_PIN);
    adc_select_input(0);

    // Setup PWM
    setup_pwm(PWM_PIN);

    while (true) {
        uint16_t pot_value = read_potentiometer();
        uint16_t duty_cycle = (pot_value * PWM_RESOLUTION) / 4095; // Scale to 16-bit

        // Apply limits
        set_pwm_duty(duty_cycle);

        // Print values
        float voltage = pot_value * (3.3f / 4095.0f);
        float duty_percent = (duty_cycle * 100.0f) / PWM_RESOLUTION;
        printf("ADC: %u, Voltage: %.2fV, Duty Cycle: %.2f%%\n", pot_value, voltage, duty_percent);
        
        sleep_ms(250);

        // Example: Dynamically update limits (could be triggered by a button/UART)
        // Uncomment this line to change limits dynamically during execution
        // update_limits(20000, 45000);
    }
    return 0;
}
