# Generated CMake Pico project file

cmake_minimum_required(VERSION 3.13)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.0)
set(toolchainVersion 13_3_Rel1)
set(picotoolVersion 2.1.0)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================

set(PICO_BOARD pico_w CACHE STRING "Board type")

# Pull in Raspberry Pi Pico SDK (must be before project)
include(pico_sdk_import.cmake)

project(i2c_scanner C CXX ASM)

# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()

# Add executable. Default name is the project name, version 0.1
add_executable(i2c_scanner i2c_scanner.c)

pico_set_program_name(i2c_scanner "i2c_scanner")
pico_set_program_version(i2c_scanner "0.1")

# Enable USB Serial output for debugging
pico_enable_stdio_uart(i2c_scanner 0)  # Disable UART
pico_enable_stdio_usb(i2c_scanner 1)   # Enable USB output

# Link necessary libraries (ORDER MATTERS)
target_link_libraries(i2c_scanner
        hardware_i2c   # I2C library
        hardware_pwm   # PWM library
        pico_stdlib    # Standard Pico libraries
)

# Add standard include files to the build
target_include_directories(i2c_scanner PRIVATE
        ${CMAKE_CURRENT_LIST_DIR}
)

# Generate additional output formats (UF2, bin, etc.)
pico_add_extra_outputs(i2c_scanner)
