# Generated CMake Pico project file

cmake_minimum_required(VERSION 3.13)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# == DO NOT EDIT THE FOLLOWING LINES for the Raspberry Pi Pico VS Code Extension to work ==
if(WIN32)
    set(USERHOME $ENV{USERPROFILE})
else()
    set(USERHOME $ENV{HOME})
endif()
set(sdkVersion 2.1.1)
set(toolchainVersion 14_2_Rel1)
set(picotoolVersion 2.1.1)
set(picoVscode ${USERHOME}/.pico-sdk/cmake/pico-vscode.cmake)
if (EXISTS ${picoVscode})
    include(${picoVscode})
endif()
# ====================================================================================

set(PICO_BOARD pico_w CACHE STRING "Board type")

# Pull in Raspberry Pi Pico SDK (must be before project)
include(pico_sdk_import.cmake)

project(MobileDevice_DDReels_Joda C CXX ASM)

# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()

# Add executable. Default name is the project name, version 0.1
add_executable(MobileDevice_DDReels_Joda MobileDevice_DDReels_Joda.c)

pico_set_program_name(MobileDevice_DDReels_Joda "MobileDevice_DDReels_Joda")
pico_set_program_version(MobileDevice_DDReels_Joda "0.1")

# Modify the below lines to enable/disable output over UART/USB
pico_enable_stdio_uart(MobileDevice_DDReels_Joda 0)
pico_enable_stdio_usb(MobileDevice_DDReels_Joda 1)

# Link necessary libraries.
# - pico_stdlib provides standard I/O and hardware support including flash routines.
# - hardware_pwm is needed for controlling LCD contrast and brightness via PWM.
target_link_libraries(MobileDevice_DDReels_Joda
    pico_stdlib
    hardware_pwm
    hardware_adc
)

# Add standard include directories.
target_include_directories(MobileDevice_DDReels_Joda PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
)

# If you use any additional libraries, add them here:
target_link_libraries(MobileDevice_DDReels_Joda 
    # Add other libraries if required, e.g., hardware_i2c, etc.
)

# Generate additional output formats (UF2, bin, etc.)
pico_add_extra_outputs(MobileDevice_DDReels_Joda)
